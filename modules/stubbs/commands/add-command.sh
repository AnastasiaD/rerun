#!/bin/bash

EXEC_DIR=$(dirname $(dirname $0))
echo $EXEC_DIR
# Source common function library
. $EXEC_DIR/lib/command.sh

# Init the handler
rerun_init 

# Get the options
while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
        # options without arguments
	# options with arguments
	-name)
	    arg_syntax_check "$#"
	    NAME="$2"
	    shift
	    ;;
	-description)
	    arg_syntax_check "$#"
	    DESC="$2"
	    shift
	    ;;
	-module)
	    arg_syntax_check "$#"
	    MODULE="$2"
	    shift
	    ;;
        # unknown option
	-?)
	    syntax_error
	    ;;
	  # end of options, just arguments left
	*)
	    break
    esac
    shift
done

# Post processes the options
[ -z "$NAME" ] && {
    echo "Name: "
    read NAME
}

[ -z "$DESC" ] && {
    echo "Description: "
    read DESC
}

[ -z "$MODULE" ] && {
    echo "Module: "
    select MODULE in $(rerun_modules $RERUN_MODULES);
    do
	echo "You picked module $MODULE ($REPLY)"
	break
    done
}

# Create command structure
mkdir -p $RERUN_MODULES/$MODULE/commands || error 

# Generate a boiler plate implementation
(
cat <<EOF
#!/bin/bash
#
# NAME
#
#   $NAME 
#
# DESCRIPTION
#
#   $DESC

# utility functions 
error() {
    echo "ERROR: \$* " ; exit 1;
}
syntax_error() {
    echo "SYNTAX ERROR" >&2 ; exit 2;
}
# check option has its argument
arg_syntax_check() {
    [ "\$1" -lt 2 ] && syntax_error
}

# options: [$(rerun_options $RERUN_MODULES $MODULE $NAME)]
while [ "\$#" -gt 0 ]; do
    OPT="\$1"
    case "\$OPT" in
$(for o in $(rerun_options $RERUN_MODULES $MODULE $NAME); do printf "%8s\n" "$(rerun_optionparser $o)"; done)
        # unknown option
        -?)
            syntax_error
            ;;
        # end of options, just arguments left
        *)
          break
    esac
    shift
done

# Post process the options

# ------------------------------
# Your implementation goes here.
# ------------------------------

exit \$?

EOF
) > $RERUN_MODULES/$MODULE/commands/$NAME.sh || error

# Create directory for command profiles
mkdir -p $RERUN_MODULES/$MODULE/etc/commands/$NAME || error

# Generate a boiler plate implementation
(
cat <<EOF
# generated by add-command
# $(date)
NAME=$NAME
DESCRIPTION=$DESC

EOF
) > $RERUN_MODULES/$MODULE/etc/commands/$NAME/command || error

# Done
echo "Created command handler: $RERUN_MODULES/$MODULE/commands/$NAME.sh"
