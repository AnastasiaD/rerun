#!/bin/bash
#
# NAME
#
#   archive
#
# DESCRIPTION
#
#   build a self extracting rerun
#

# Source common function library
. $RERUN_MODULES/stubbs/lib/functions.sh

# print an error and exit
die() { echo "ERROR: \$* " ; exit 1 ; }

# Init the handler
rerun_init 

# Get the options
while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
        # options without arguments
	# options with arguments
	-name)
	    rerun_syntax_check "$#"
	    NAME="$2"
	    shift
	    ;;
	-description)
	    rerun_syntax_check "$#"
	    DESC="$2"
	    shift
	    ;;
	-module)
	    rerun_syntax_check "$#"
	    MODULE="$2"
	    shift
	    ;;
	-overwrite)
	    rerun_syntax_check "$#"
	    OVERWRITE="$2"
	    shift
	    ;;
        # unknown option
	-?)
	    rerun_syntax_error
	    ;;
	  # end of options, just arguments left
	*)
	    break
    esac
    shift
done

# Post processes the options
[ -z "$NAME" ] && {
    echo "Name: "
    read NAME
}

[ -z "$DESC" ] && {
    echo "Description: "
    read DESC
}

[ -z "$MODULE" ] && {
    echo "Module: "
    select MODULE in $(rerun_modules $RERUN_MODULES);
    do
	echo "You picked module $MODULE ($REPLY)"
	break
    done
}

# Create command structure
mkdir -p $RERUN_MODULES/$MODULE/commands/$NAME || die


options=$(echo $(rerun_options $RERUN_MODULES $MODULE $NAME)|sort|tr '[:lower:]' '[:upper:]')

# Generate a boiler plate implementation
[ ! -f $RERUN_MODULES/$MODULE/commands/$NAME/default.sh -o -n "$OVEWRITE" ] && {
(
cat <<EOF
#!/bin/bash
#
# NAME
#
#   $NAME 
#
# DESCRIPTION
#
#   $DESC
#

# Function to print error message and exit
die() {
    echo "ERROR: \$* " ; exit 1;
}

# Parse the command options
[ -r \$RERUN_MODULES/$MODULE/commands/$NAME/options.sh ] && {
  . \$RERUN_MODULES/$MODULE/commands/$NAME/options.sh
}

# ------------------------------
# Your implementation goes here.
# ------------------------------

exit \$?

EOF
) > $RERUN_MODULES/$MODULE/commands/$NAME/default.sh || die
echo "Wrote command handler: $RERUN_MODULES/$MODULE/commands/$NAME/default.sh"
}

# Generate a boiler plate implementation
(
cat <<EOF
# generated by add-command
# $(date)
NAME=$NAME
DESCRIPTION=$DESC

EOF
) > $RERUN_MODULES/$MODULE/commands/$NAME/metadata || die

# Done
