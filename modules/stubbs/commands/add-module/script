#!/usr/bin/env bash
#
#/ command: stubbs:add-module: "add a new module"
#/ usage: stubbs:add-module --interpreter|-i <bash> --module|-m <> --description <>

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions and those defined for stubbs.
. $RERUN_MODULE_DIR/lib/functions.sh add-module || { 
    echo >&2 "failed loading function library" ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: stubbs:add-module. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail


# Command implementation
# ----------------------

stubbs_init

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: INTERPRETER MODULE DESCRIPTION


# Get the options
while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
        # options without arguments
	# options with arguments
	-i|--interpreter)
	    rerun_option_check "$#" "$1"
	    INTERPRETER="$2"
	    shift
	    ;;
	-m|--module)
	    rerun_option_check "$#" "$1"
	    MODULE="$2"
	    shift
	    ;;
	--description)
	    rerun_option_check "$#" "$1"
	    DESCRIPTION="$2"
	    shift
	    ;;
        # unknown option
	-?)
	    rerun_option_usage
        exit 2
	    ;;
	  # end of options, just arguments left
	*)
	    break
    esac
    shift
done

# Post processes the options
[ -z "${MODULE:-}" ] && {
    echo "Module name: "
    read MODULE
}

[ -z "${DESCRIPTION:-}" ] && {
    echo "Module description: "
    read DESCRIPTION
}

# Set bash as the default interpreter.
: ${INTERPRETER:=bash}

INTERPRETER_LIB=$RERUN_MODULE_DIR/lib/interpreters/$INTERPRETER
[[ ! -d "$INTERPRETER_LIB" ]] && rerun_die "Library not found: $INTERPRETER_LIB"

RERUN_FUNCTION_LIB=$(rerun_property_get $INTERPRETER_LIB RERUN_FUNCTION_LIB) || {
    rerun_die "required metadata not found: RERUN_FUNCTION_LIB"
}

[[ ! -f  $INTERPRETER_LIB/$RERUN_FUNCTION_LIB ]] && {
    rerun_die "function library not found:  $INTERPRETER_LIB/$RERUN_FUNCTION_LIB"
}

# Create module structure

mkdir -p $RERUN_MODULES/$MODULE || rerun_die "Failed creating module structure."
# Create commands/ subdirectory
mkdir -p $RERUN_MODULES/$MODULE/commands || rerun_die "Failed creating module structure."
# Create lib/ subdirectory
mkdir -p $RERUN_MODULES/$MODULE/lib || rerun_die "Failed creating module structure."

# Generate a profile for metadata
(
cat <<EOF
# generated by stubbs:add-module
# $(date)
NAME=$MODULE
DESCRIPTION="$DESCRIPTION"
INTERPRETER="$INTERPRETER"
VERSION=
REQUIRES=

EOF
) > $RERUN_MODULES/$MODULE/metadata || rerun_die "Failed generating metadata."

# Give it the beginnings of a function library.
# Replace the word "@MODULE@" with the module's given name.
sed -e "s/@MODULE@/$MODULE/g" \
	-e "s,@DESCRIPTION@,$DESCRIPTION,g" \
	-e "s/@INTERPRETER@/$INTERPRETER/g" \
    "$INTERPRETER_LIB/$RERUN_FUNCTION_LIB" \
    > "$RERUN_MODULES/$MODULE/lib/$(basename $RERUN_FUNCTION_LIB)" || {
    rerun_die "Failed creating function library for \"$MODULE\"."
}

# Done
echo "Created module structure: $RERUN_MODULES/$MODULE."
