#!/usr/bin/env bash
#
# command: stubbs:archive: "Build a self extracting archive"
#/ usage: rerun stubbs:archive [ --file|-f <>] [ --format|-f <bin>]  --modules <'*'> [ --release <1>] [ --version <1.0.0>] 


# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions and those defined for stubbs.
. $RERUN_MODULE_DIR/lib/functions.sh || { 
    echo >&2 "failed laoding function library" ; exit 1 ; 
}

# Parse the command options
[ -r $RERUN_MODULE_DIR/commands/archive/options.sh ] && {
  . $RERUN_MODULE_DIR/commands/archive/options.sh
}


# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: stubbs:archive. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail


# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: FILE FORMAT MODULES RELEASE VERSION

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"

# Command implementation
# ----------------------

buildbinarchive() {
  CWD=$(pwd); #remember current working directory.

  # Check if file option was specified and if not set it to rerun.bin.
  [ -z "${FILE:-}"  ] && FILE=rerun.bin 

  # Prepend curren working directory if relative file path.
  [[ ${FILE} == "/"* ]] || FILE=$CWD/$FILE

  [ ! -d $(dirname ${FILE}) ] && rerun_option_error "directory not found: $(dirname ${FILE})"

  # create a work directory the archive content
  export PAYLOAD=`mktemp -d /tmp/rerun.stubbs.archive.XXXXXX` || rerun_die

  #
  # Start preparing the payload content.
  #

  # Iterate through the the specified modules and add them to payload
  mkdir -p $PAYLOAD/rerun/modules || rerun_die
  pushd $RERUN_MODULES >/dev/null || rerun_die
  for module in $MODULES
  do
      # Check for a commands subdir to be sure it looks like a module
      if [ -d $RERUN_MODULES/$module/commands ]
      then
        cp -r $RERUN_MODULES/$module $PAYLOAD/rerun/modules || rerun_die
      fi
  done
  popd >/dev/null

  # Copy rerun itself to the payload
  cp $RERUN $PAYLOAD/rerun || rerun_die

  # Copy in the extract and launcher scripts used during execution
  for template in $RERUN_MODULE_DIR/templates/{extract,launcher}
  do
      # replace the template substitution tokens ...
      sed -e "s/@GENERATOR@/stubbs:archive/" \
          -e "s/@DATE@/$(date)/" \
          -e "s/@USER@/${USER:-$LOGNAME}/" \
          -e "s/@VERSION@/$VERSION/" \
          -e "s/@RELEASE@/$RELEASE/" \
          $template > $PAYLOAD/$(basename $template) || rerun_die
      # ... and save it to the payload --^
  done

  #
  # Archive the content
  #

  cd $PAYLOAD

  # make the payload.tar file
  tar cf payload.tar launcher extract rerun || rerun_die

  # compress and base64 encode the tar file
  if [ -e "payload.tar" ]; then
      gzip -c payload.tar | openssl enc -base64 > payload.tgz.base64   || rerun_die

      if [ -e "payload.tgz.base64" ]; then
          #
          # Prepend the extract script to the payload.
          #    and thus turn the thing into a shell script!
          #
          cat extract payload.tgz.base64 > ${FILE} || rerun_die
      else
          rerun_die "$PAYLOAD/payload.tgz.base64 does not exist"
      fi
  else
      rerun_die "payload.tar does not exist"
  fi

  #
  # Make the archive executable
  #
  chmod +x ${FILE} || rerun_die "failed setting archive executable"
  #
  # Clean up the temp directory
  #
  find ${PAYLOAD} -type d -exec chmod 755 {} \;
  find ${PAYLOAD} -type f -exec chmod 644 {} \;
  rm -rf $PAYLOAD


  echo "Wrote self extracting archive script: ${FILE}"
}

buildrpmarchive() {

  for MODULE_DIR in $RERUN_MODULES/$MODULES
  do
    if [[ -r $MODULE_DIR/metadata ]]
    then
      # Setup a temporary directory to build the RPM:
      RPMTOPDIR=$(mktemp -d /tmp/rerun.stubbs.rpm.XXXXXX) || rerun_die "couldn't make a temporary directory to build the rpm"
      mkdir $RPMTOPDIR/SOURCES || rerun_die
      mkdir $RPMTOPDIR/BUILD || rerun_die
      mkdir $RPMTOPDIR/RPMS || rerun_die

      # Source the module metadata:
      unset NAME DESCRIPTION VERSION REQUIRES EXTERNALS
      . $MODULE_DIR/metadata

      [[ -n $NAME ]] || rerun_die "no module name in \"$MODULE_DIR/metadata\""
      [[ -n $DESCRIPTION ]] || rerun_die "no description in \"$MODULE_DIR/metadata\""

      if [[ -z $VERSION ]]
      then
        rerun_die "no version in \"$MODULE_DIR/metadata\""
      fi

      # Extract the module's major version number:
      MAJOR_VERSION="$(echo $VERSION | cut -d. -f1)"
      MINOR_VERSION="$(echo $VERSION | cut -d. -f2)"
      REVISION_VERSION="$(echo $VERSION | cut -d. -f3)"

      [[ -z $MAJOR_VERSION || -z $MINOR_VERSION || -z $REVISION_VERSION ]] && rerun_die "module version (\"$VERSION\") should be of the form \"major.minor.revision\""

      # Extract Rerun's major version number:
      RERUN_MAJOR_VERSION="$(echo $RERUN_VERSION | cut -d. -f1)"

      # Backwards compatibility is guaranteed to the minor version:
      if [[ ${MAJOR_VERSION} -ne ${RERUN_MAJOR_VERSION} ]]
      then
        rerun_die "the module's major version number (\"${MAJOR_VERSION}\") must match the major number (\"${RERUN_MAJOR_VERSION}\") of the version of Rerun being used to build the archive"
      fi

      if [[ -z $REQUIRES ]]
      then
        REQUIRES="rerun = $RERUN_MAJOR_VERSION"
      else
        # Enforces specified module dependencies at the major version number:
        REQUIRES="rerun = $RERUN_MAJOR_VERSION,$(echo $REQUIRES | sed -e 's/[ \t]*//g' -e "s/\([^,]*\)/rerun-\1 = ${MAJOR_VERSION}/g")"
      fi

      if [[ -n $EXTERNALS ]]
      then
        REQUIRES="$REQUIRES,$EXTERNALS"
      fi

      # get the Distribution
      if [[ "$(uname -s)" = "Darwin" ]]; then
        RPMDIST=".osx"
      else
        RPMDIST=$(rpm --eval %{?dist})
      fi

      # Remove any existing builds:
      rm -f $MODULE_DIR/rerun-${NAME}*.noarch.rpm

      # Prepare the source archive hierarchy:
      mkdir $RPMTOPDIR/SOURCES/rerun-${NAME}-${VERSION} || rerun_die
      mkdir $RPMTOPDIR/tmp || rerun_die
      pushd $MODULE_DIR > /dev/null
      find . | cpio --quiet -pdm $RPMTOPDIR/SOURCES/rerun-${NAME}-${VERSION}
      popd > /dev/null

      # Build the source archive:
      pushd $RPMTOPDIR/SOURCES > /dev/null
      tar -zcf \
        $RPMTOPDIR/SOURCES/rerun-${NAME}-${VERSION}.tar.gz rerun-${NAME}-${VERSION} \
        || rerun_die "failed to build \"$RPMTOPDIR/SOURCES/rerun-${NAME}-${VERSION}.tar.gz\""
      if [ ! -w ${RPMTOPDIR}/SOURCES/rerun-${NAME}-${VERSION}/commands ]; then
        # this happens in autoconf "make distcheck", so this is a workaround
        chmod -R u+w ${RPMTOPDIR}/SOURCES/rerun-${NAME}-${VERSION}/*
      fi
      rm -rf ${RPMTOPDIR}/SOURCES/rerun-${NAME}-${VERSION}
      popd > /dev/null

      # Build the RPM:
      rpmbuild -bb \
        --target noarch \
        --define "_topdir ${RPMTOPDIR}" \
        --define "module ${NAME}" \
        --define "desc ${DESCRIPTION}" \
        --define "version ${VERSION}" \
        --define "release ${RELEASE}" \
        --define "requires ${REQUIRES}" \
        --define "major ${MAJOR_VERSION}" \
        --define "minor ${MINOR_VERSION}" \
        --define "revision ${REVISION_VERSION}" \
        ${RERUN_MODULE_DIR}/templates/rerun-module.spec \
      || rerun_die "failed to build rerun-${NAME}-${VERSION}-${RELEASE}${RPMDIST}.noarch.rpm"

      # Move the RPM:
      /bin/mv ${RPMTOPDIR}/RPMS/noarch/rerun-${NAME}-${VERSION}-${RELEASE}${RPMDIST}.noarch.rpm . \
        || rerun_die "failed to move rerun-${NAME}-${VERSION}-${RELEASE}${RPMDIST}.noarch.rpm"
      echo "Wrote $(basename ${MODULE_DIR}) module rpm : rerun-${NAME}-${VERSION}-${RELEASE}${RPMDIST}.noarch.rpm"

      # Clean up the temporary directory:
      /bin/rm -rf ${RPMTOPDIR}
    fi
  done
}
case $FORMAT in
  bin)
    buildbinarchive
    ;;
  rpm)
    buildrpmarchive
    ;;
  *)
    rerun_die "invalid archive format \"$FORMAT\""
    ;;
esac

exit 0

# Done

