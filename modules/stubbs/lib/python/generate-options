#!/usr/bin/env python
import os
import re
import sys
import string


# Check for required arguments
if not len(sys.argv) == 4:
    print >> sys.stderr, "usage: generate-options <modulesdir> <module> <command>" 
    sys.exit(1)

module_dir=sys.argv[1]
module=sys.argv[2]
command=sys.argv[3]


def loadMetadata(file):
    metadata = {}
    with open(file) as metadatafile:
        for line in metadatafile:
            if line.startswith("#") or not line.strip() :
                continue
            name, value = line.partition("=")[::2]
            if len(value.strip()) > 0:
                metadata[name.strip()] = value.strip()
    return metadata

def loadOptions(module_dir, command):
    options = {}
    metadata = loadMetadata(module_dir+"/commands/"+command+"/metadata")
    optionList = metadata['OPTIONS'].strip('"')
    for opt in optionList.split():
        options[opt] = loadMetadata(module_dir+"/options/"+opt+"/metadata")
    return options


class CodeGeneratorBackend:

    def begin(self, tab="\t"):
        self.code = []
        self.tab = tab
        self.level = 0

    def end(self):
        return string.join(self.code, "")

    def write(self, string):
        self.code.append(self.tab * self.level + string)

    def indent(self):
        self.level = self.level + 1

    def dedent(self):
        if self.level == 0:
            raise SyntaxError, "internal error in code generator"
        self.level = self.level - 1
        
# -------------------------------

# Begin processing

moddir = os.environ['RERUN_MODULES'] + "/" + module
options=loadOptions(moddir, command)

c = CodeGeneratorBackend()
c.begin(tab="    ")
c.write("#\n")
c.write("import argparse\n")
c.write("#\n")
c.write("def parser():\n")
c.indent()
c.write("parser = argparse.ArgumentParser(description='Command option parser')\n")
    
for optname, optmd in options.iteritems():
    if 'true' in optmd['ARGUMENTS']:
        optmd['NARGS']='"?"'
#    else:
#        optmd['NARGS']=0
    if 'true' in optmd['REQUIRED']:
        optmd['REQ']=True
    else:
        optmd['REQ']=False
    optmd['DEST'] = optmd['NAME'].upper()
    
    if 'SHORT' in optmd:
        c.write("parser.add_argument('-{SHORT}','--{NAME}',\n".format(**optmd))
    else:
        c.write("parser.add_argument('--{NAME}',\n".format(**optmd))

    c.indent()
    c.write("help='{DESCRIPTION}',\n".format(**optmd))
    if 'DEFAULT' in optmd:
        c.write("default='{DEFAULT}',\n".format(**optmd))

    c.write("nargs={NARGS}, required={REQ}, dest='{DEST}')".format(**optmd))
    c.write("\n")
    c.dedent()
c.write("return parser\n")
print c.end()





