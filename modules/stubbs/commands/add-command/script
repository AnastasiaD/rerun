#!/usr/bin/env bash
#
# NAME
#
#   add-command
#
# DESCRIPTION
#
#   add command to module
#
#/ usage: stubbs:add-command  --command|-c <> --module|-m <> [-overwrite] [-template <>]

# Source common function library
. $RERUN_MODULE_DIR/lib/functions.sh || { echo >&2 "failed loading function library" ; exit 1 ; }


# Init the handler
stubbs_init 


# Get the options
while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
    # options without arguments
	# options with arguments
	-c|--command)
	    rerun_option_check "$#" "$1"
	    COMMAND="$2"
	    shift
	    ;;
	--description)
	    rerun_option_check "$#" "$1"
	    DESC="$2"
	    shift
	    ;;
	-m|--module)
	    rerun_option_check "$#" "$1"
	    MODULE="$2"
	    shift
	    ;;
	--overwrite)
	    rerun_option_check "$#" "$1"
	    OVERWRITE="$2"
	    shift
	    ;;
	-t|--template)
	    rerun_option_check "$#" "$1"
	    TEMPLATE="$2"
	    shift
	    ;;
        # unknown option
	-?)
	    rerun_option_usage
        exit 2
	    ;;
	  # end of options, just arguments left
	*)
	    break
    esac
    shift
done

# Post processes the options

[ -z "$MODULE" ] && {
    echo "Module: "
    select MODULE in $(rerun_modules $RERUN_MODULES);
    do
	echo "You picked module $MODULE ($REPLY)"
	break
    done
}

[ -z "$COMMAND" ] && {
    echo "Command: "
    read COMMAND
}

[ -z "$DESC" ] && {
    echo "Description: "
    read DESC
}


# Read language setting for module. Set it to 'bash' as a default.
INTERPRETER=$(rerun_property_get $RERUN_MODULES/$MODULE INTERPRETER)
: ${INTERPRETER:=bash}; #default it

INTERPRETER_LIB=$RERUN_MODULE_DIR/lib/interpreters/$INTERPRETER

RERUN_OPTIONS_SCRIPT=$(rerun_property_get $INTERPRETER_LIB RERUN_OPTIONS_SCRIPT) || {
    rerun_die "required metadata not found: RERUN_OPTIONS_SCRIPT"
}

OPTIONS_PARSER_SCRIPT=$RERUN_MODULES/$MODULE/commands/$COMMAND/$RERUN_OPTIONS_SCRIPT


# Create command structure
mkdir -p $RERUN_MODULES/$MODULE/commands/$COMMAND || rerun_die "Failed creating command structure"

VARIABLES=$(stubbs_option_variables $RERUN_MODULES/$MODULE $COMMAND)

RERUN_COMMAND_SCRIPT=$(rerun_property_get $INTERPRETER_LIB RERUN_COMMAND_SCRIPT) || {
    rerun_die "required metadata not found: RERUN_COMMAND_SCRIPT"
}


[ -z "$TEMPLATE" ] && {
    TEMPLATE=$INTERPRETER_LIB/$RERUN_COMMAND_SCRIPT
}
[ ! -f "$TEMPLATE" ] && {
    rerun_syntax_error "command script template not found: \"$TEMPLATE\""
}


CMD_SCRIPT=$RERUN_MODULES/$MODULE/commands/$COMMAND/$(basename $RERUN_COMMAND_SCRIPT)

# Generate a boiler plate implementation
[ ! -f $CMD_SCRIPT -o -n "$OVERWRITE" ] && {
    sed -e "s/@COMMAND@/$COMMAND/g" \
	-e "s/@MODULE@/$MODULE/g" \
	-e "s,@DESCRIPTION@,$DESC,g" \
	-e "s/@INTERPRETER@/$INTERPRETER/g" \
    -e "s/@VARIABLES@/$VARIABLES/g" \
	$TEMPLATE > $CMD_SCRIPT || rerun_die "Failed generating stub comand script"
    chmod +x $CMD_SCRIPT || rerun_die "Failed settng execute bit on command script"
    echo "Wrote command script: $CMD_SCRIPT"
}

# Generate a unit test script
mkdir -p $RERUN_MODULES/$MODULE/tests || rerun_die "failed creating tests directory"
[ ! -f $RERUN_MODULES/$MODULE/tests/$COMMAND-1-test.sh -o -n "$OVERWRITE" ] && {
    sed -e "s/@MODULE@/$MODULE/g" \
	-e "s/@COMMAND@/$COMMAND/g" \
	-e "s/@INTERPRETER@/$INTERPRETER/g" \
	-e "s;@RERUN@;${RERUN};g" \
	-e "s;@RERUN_MODULES@;${RERUN_MODULES};g" \
	$RERUN_MODULE_DIR/templates/test.roundup > $RERUN_MODULES/$MODULE/tests/$COMMAND-1-test.sh || rerun_die
    echo "Wrote test script: $RERUN_MODULES/$MODULE/tests/$COMMAND-1-test.sh"
}
[ ! -f $RERUN_MODULES/$MODULE/tests/functions.sh -o -n "$OVERWRITE" ] && {
    sed -e "s/@MODULE@/$MODULE/g" \
	$RERUN_MODULE_DIR/templates/test.functions.sh > $RERUN_MODULES/$MODULE/tests/functions.sh || rerun_die "Failed generating test functions library."
}

# Generate command metadata
(
cat <<EOF
# command metadata
# generated by stubbs:add-command
# $(date)
NAME=$COMMAND
DESCRIPTION="$DESC"
OPTIONS=
EOF
) > $RERUN_MODULES/$MODULE/commands/$COMMAND/metadata || rerun_die "Failed creating command metadata"

# Generate empty options parser script
#
touch "$OPTIONS_PARSER_SCRIPT" || rerun_die "Failed initializing parser script."

# Done
