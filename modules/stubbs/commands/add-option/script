#!/usr/bin/env bash
#
# NAME
#
#   add-option
#
# DESCRIPTION
#
#   add a command option
#
#/ usage: stubbs:add-option [--arg <false>] --command|-c <> [--default|-d <>] --description <> [--export|-e <false>] [--long <>] --module|-m <> --option|-o <> [--required <false>] [--short <>]

# Source common function library
. $RERUN_MODULE_DIR/lib/functions.sh || { echo >&2 "failed laoding function library" ; exit 1 ; }

display_default() {
    eval local var=\$$1
    if [[ -n "$var" ]]
    then  printf " (%s):" "$var" 
    else  printf ":" 
    fi
}

# Init the handler
stubbs_init

# Get the options
while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
        # options without arguments
	# options with arguments
	-o|--option)
	    rerun_option_check "$#" "$1"
	    OPTION="$2"
	    shift
	    ;;
	--desc*)
	    rerun_option_check "$#" "$1"
	    DESC="$2"
	    shift
	    ;;
	-c|--command)
	    rerun_option_check "$#" "$1"
		# Parse if command is named "module:command"
	 	regex='([^:]+)(:)([^:]+)'
		if [[ $2 =~ $regex ]]
		then
			MODULE=${BASH_REMATCH[1]}
			COMMAND=${BASH_REMATCH[3]}
		else
	    	COMMAND="$2"		
	    fi
	    shift
	    ;;
	-m|--module)
	    rerun_option_check "$#" "$1"
	    MODULE="$2"
	    shift
	    ;;
	--export|-e)
	    rerun_option_check "$#" "$1"
	    EXPORT="$2"
	    shift
	    ;;
	--req*)
	    rerun_option_check "$#" "$1"
	    REQ="$2"
	    shift
	    ;;
	--arg*)
	    rerun_option_check "$#" "$1"
	    ARGS="$2"
	    shift
	    ;;
	--long)
	    rerun_option_check "$#" "$1"
	    LONG="$2"
	    shift
	    ;;	
	--short)
	    rerun_option_check "$#" "$1"
	    SHORT="$2"
	    shift
	    ;;	
	-d|--default)
	    rerun_option_check "$#" "$1"
	    DEFAULT="$2"
	    shift
	    ;;
        # unknown option
	-?)
	    rerun_option_usage
        exit 2
	    ;;
	  # end of options, just arguments left
	*)
	    break
    esac
    shift
done


[ -z "$MODULE" ] && {
    printf "Module: \n"
    select MODULE in $(rerun_modules $RERUN_MODULES);
    do
	echo "You picked module $MODULE ($REPLY)"
	break
    done
}

# check the chosen module exists
[ ! -f $RERUN_MODULES/$MODULE/metadata ] && rerun_option_error "module not found: $MODULE"

[ -z "$COMMAND" ] && {
    commands=( $(rerun_commands $RERUN_MODULES $MODULE) )
    [[ -z ${commands:-} ]] && rerun_die "No commands exist for module: $MODULE"
    printf "Command: \n"
    select COMMAND in ${commands[*]}
    do
	echo "You picked command $COMMAND ($REPLY)"
	break
    done
}

# Verify this command exists
#
[ ! -d $RERUN_MODULES/$MODULE/commands/$COMMAND ] && rerun_option_error "command not found: \"$MODULE:$COMMAND\""


# Was option argument specified?
[ -z "$OPTION" ] && {
    printf "Option: \n"
    read OPTION
}

# This option might already be declared.
# Confirm the option declaration settings.
if [[ -f $RERUN_MODULES/$MODULE/options/$OPTION/metadata ]]
then
    CURR_DESC=$(rerun_property_get $RERUN_MODULES/$MODULE/options/$OPTION DESCRIPTION)
    CURR_REQ=$(rerun_property_get $RERUN_MODULES/$MODULE/options/$OPTION REQUIRED)
    CURR_DEFAULT=$(rerun_property_get $RERUN_MODULES/$MODULE/options/$OPTION DEFAULT)
    CURR_EXPORT=$(rerun_property_get $RERUN_MODULES/$MODULE/options/$OPTION EXPORT)
fi
# Confirm the description.
[ -z "$DESC" ] && {
    printf "Description%s\n" "$(display_default CURR_DESC)"
    read DESC
    [[ -n "${CURR_DESC}" && -z "$DESC" ]] && DESC=${CURR_DESC}
}
# Confirm the option requirement.
[ -z "$REQ" ] && {
    printf "Required%s\n" "$(display_default CURR_REQ)"
    select REQ in true false;
    do	break
    done
}

# Confirm the option export requirement.
[ -z "$EXPORT" ] && {
    printf "Export%s\n" "$(display_default CURR_EXPORT)"
    select EXPORT in true false;
    do	break
    done
    [[ -n "${CURR_EXPORT}" && -z "$EXPORT" ]] && EXPORT=${CURR_EXPORT}
}

# Confirm the default value.
[ -z "$DEFAULT" ] && {
    printf "Default%s\n" "$(display_default CURR_DEFAULT)"
    read DEFAULT
    [[ -n "${CURR_DEFAULT}" && -z "$DEFAULT" ]] && DEFAULT=${CURR_DEFAULT}
}

# If short is specified, check it's not already used.
[ -n "$SHORT" ] && {
    options=$(stubbs_options_with_short "$RERUN_MODULES/$MODULE" $SHORT)
    [ -n "$options" ] && {
        rerun_die "-${SHORT} already used by option: $options"
    }
}

# Generate metadata for new option
mkdir -p  $RERUN_MODULES/$MODULE/options/$OPTION
(
    cat <<EOF
# option metadata
# generated by stubbs:add-option
# $(date)
NAME=$OPTION
DESCRIPTION="$DESC"
ARGUMENTS=${ARGS:-true}
REQUIRED=${REQ:-true}
SHORT=${SHORT}
LONG=${LONG:-$OPTION}
DEFAULT=$DEFAULT
EXPORT=$EXPORT

EOF
) > $RERUN_MODULES/$MODULE/options/$OPTION/metadata || {
    rerun_die "Failed generating $OPTION option metadata"
}
echo "Wrote option metadata: $RERUN_MODULES/$MODULE/options/$OPTION/metadata"

#
# Update the command metadata.
#
command_options=( $(rerun_options $RERUN_MODULES $MODULE $COMMAND) )
# Add this OPTION to the list if it is not yet assigned.
rerun_list_contains "$OPTION" "${command_options[@]:-}" || {
    command_options=( ${command_options[*]} $OPTION )
}

command_metadata=$RERUN_MODULES/$MODULE/commands/$COMMAND/metadata

stubbs_command_options_write \
    $RERUN_MODULES/$MODULE $COMMAND \
    "${command_options[*]}" || rerun_die "Failed generating command metadata"
echo "Updated command metadata:  $command_metadata"


#
# Generate option parser script.
#

# Read language setting for module. Set it to 'bash' as a default.
INTERPRETER=$(. $RERUN_MODULES/$MODULE/metadata; echo ${INTERPRETER:-bash});

[ ! -f $RERUN_MODULE_DIR/lib/interpreters/$INTERPRETER/metadata ] && {
    rerun_die "language unsupported: $INTERPRETER"
}
.  $RERUN_MODULE_DIR/lib/interpreters/$INTERPRETER/metadata || {
    rerun_die "error reading  $RERUN_MODULE_DIR/lib/interpreters/$INTERPRETER/metadata "
}
[ -z "$RERUN_OPTIONS_GENERATOR" ] && {
    rerun_die "required metadata not found: RERUN_OPTIONS_GENERATOR"
}
[ -z "$RERUN_OPTIONS_SCRIPT" ] && {
    rerun_die "required metadata not found: RERUN_OPTIONS_SCRIPT"
}
options_parser=$RERUN_MODULES/$MODULE/commands/$COMMAND/$RERUN_OPTIONS_SCRIPT

$RERUN_MODULE_DIR/lib/interpreters/$INTERPRETER/$RERUN_OPTIONS_GENERATOR \
    $RERUN_MODULES $MODULE $COMMAND > $options_parser || {
    rerun_die "Failed generating options parser."
}

# Update the command script header to give it the updated
# variable summary and usage info.

[ -z "$RERUN_COMMAND_SCRIPT" ] && {
    rerun_die "required metadata not found: RERUN_COMMAND_SCRIPT"
}

command_script=$RERUN_MODULES/$MODULE/commands/$COMMAND/$(basename $RERUN_COMMAND_SCRIPT)
if [ -f "$command_script" ]
then
    stubbs_script_header \
        $RERUN_MODULES/$MODULE $COMMAND > ${command_script}.$$ || {
        rerun_die "Error updating command script header"
    }
    mv $command_script.$$ $command_script || {
        rerun_die "Error updating command script header"
    }
    chmod +x $command_script || rerun_die "Failed setting execute bit on command script."
    echo "Updated command script header: $command_script"
fi

# Done
exit $?

