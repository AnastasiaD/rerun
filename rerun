#!/usr/bin/env bash
#
# **rerun** - a simple command runner because it's easy to forget 
# standard operating procedure. If you've got a bunch of loose
# unstructured shell scripts, rerun will help you
# turn them into testable automation modules.
# 
# Minimalism is rerun's goal. It will try to stay out of the way
# yet take care of some of the grunt work.
#
# __Install__
# 
# See [wiki](http://github.com/rerun/rerun/wiki) for install and
# setup instructions.


# The rerun version.

RERUN_VERSION=1.0

# Execute bash from the PATH to help make it more portable.

: ${RERUN_SH:="/usr/bin/env bash"}

# The `diff` command is used with the --replay option to compare execution output.
# Export `DIFF` environment variable to specify a specific `diff` command.
: ${DIFF:=diff}

# Set the RERUN environment variable so subsequent 
# invocations use the same executable. 
# This helps chaining command executions across modules.
export RERUN=$0

# To disable color effects: `unset RERUN_COLOR`.

[[ -n "$RERUN_COLOR" ]] && {
    ul="\033[4m" ; _ul="\033[0m" ; # underline
    gray="\033[38;5;238m" ; _gray="\033[0m" ; # gray
    red="\033[31m" ; _red="\033[0m" ; # red
    bold="\033[1m$*\033[0m" ; _bold="\033[0m" ; # bold
}

# Public functions
# ----------------------

# _rerun_die_

# Print the message and exit.
# Use text effects if `RERUN_COLOR` environment variable set.
rerun_die() {
    if [[ -n "$RERUN_COLOR" ]]
    then echo >&2 -e ${red}"ERROR: $*"${_red} 
    else echo >&2 "ERROR: $*"
    fi
    exit 1
}

# _rerun_syntax_error_

# Print a syntax error and exit with code 2.
rerun_syntax_error() {
    if [[ -n "$RERUN_COLOR" ]]
    then echo >&2 -e ${red}"SYNTAX: $*"${_red} 
    else echo >&2 "SYNTAX: $*" 
    fi
    exit 2
}

# _rerun_syntax_check_

# Check option has an argument. If an argument is required, 
# then error out. If the check succeeds, return 0. 
rerun_syntax_check() {
    if [[ "$1" -lt 2 ]]
    then rerun_syntax_error "option requires argument: $2"
    else return 0
    fi
}

# _rerun_resolveCommandScript_

# Resolve the handler script for specified command in module.
# Uses `uname -s` to get OS name for specific handlers.
# If the user created a script named after the OS,
# then print that path otherwise print the default one.
rerun_resolveCommandScript() {
    [[ ! $# -eq 2 ]] && { 
        rerun_die 'wrong # args: should be: rerun_resolveCommandScript module command'
    }
    local module_dir=$1 command=$2
    local command_dir=$module_dir/commands/${command}
    local os=$(uname -s)
    if [[ -f  "$command_dir/${os}.sh" ]]
    then echo $command_dir/${os}.sh; 
    else echo $command_dir/default.sh; 
    fi
}

# _rerun_existsCommandScript_

# Checks if handler script exists (default or otherwise).
# return 0 if exists, 1 otherwise
rerun_existsCommandScript() {
    [[ ! $# -eq 2 ]] && { 
        rerun_die 'wrong # args: should be: rerun_existsCommandScript module_dir command'
    }
    local module_dir=$1 command=$2
    if [[ -f "$(rerun_resolveCommandScript $module_dir $command)" ]]
    then return 0
    else return 1
    fi
}

# _rerun_existsModule_

# Check if module exists.
# It's a module if it has a `metadata` file in the subdirectory.
# Give precedence to finding the module in $RERUN_MODULES.
# If running an installed version of Rerun check the system location for the module:
rerun_existsModule() {
    [[ ! $# -eq 1 ]] && { 
        rerun_die 'wrong # args: should be: rerun_existsModule module'
    }
    local module=$1

    if [[ -f "$RERUN_MODULES/$module/metadata" ]]
    then
       echo $RERUN_MODULES/$module
       return 0
    fi

    if [[ "${RERUN_LOCATION}" = "/usr/bin" && -f "/usr/lib/rerun/modules/$module/metadata" ]]
    then
       echo /usr/lib/rerun/modules/$module
       return 0
    fi

    echo ""
    return 1
}

# _rerun_executeCommand_
# 
# Command scripts see the following environment variables:
#   RERUN, RERUN_MODULES, RERUN_MODULE_DIR
# There are two modes of execution: normal and replay. 
# Normal mode is what you'd expect. The handler script for the
# command is looked up an executed with user options.
# Replay mode occurs when a user specifies a replay file and
# its output is extracted and compared to a new execution.
# Exit, if the command script is not found.
# User specified a command that did not exist in the RERUN_MODULES directory.
# If the  `-L` flag is set, record execution.
#
# __Normal execution mode__
# 
# Execute the command script if it is executable
# otherwise run it using the same interpreter as rerun.
# Return the command script's exit code as the result.
#
# __Recorded execution mode__
# 
# When logging is enabled, run the command script in replay mode.
#
# __Replay execution mode__
# 
# If the `--replay` option is set, then extract the output
# from the log file and compare it to the results of this execution.
# Use the `diff` command to compare the two
# and show the diff output if execution output 
# doesn't match the replay file content.

rerun_executeCommand() {
    [[ ! $# -ge 2 ]] && { 
        rerun_die "wrong # args: should be: rerun_executeCommand module command options" 
    }
    MODULE=$1; 
    COMMAND=$2; 
    shift; shift;

    RERUN_MODULE_DIR=$(rerun_existsModule "$MODULE") || rerun_syntax_error "module not found: \"$MODULE\""

    ! rerun_existsCommandScript $RERUN_MODULE_DIR $COMMAND && {
        rerun_syntax_error command not found: \"$MODULE:$COMMAND\"
    }


    export RERUN RERUN_MODULES RERUN_MODULE_DIR

    COMMAND_SCRIPT=$(rerun_resolveCommandScript $RERUN_MODULE_DIR $COMMAND)

    if [[ -z "$RERUN_LOGS" || ! -d "$RERUN_LOGS" ]]
    then

        if [[ -x $COMMAND_SCRIPT ]]
        then
            $COMMAND_SCRIPT "$@"
            RERUN_EXITSTATUS=$?
        else
            $RERUN_SH $RERUN_VERBOSE $COMMAND_SCRIPT "$@"	
            RERUN_EXITSTATUS=$?
        fi
    else

        TSTAMP=$(date '+%Y-%m-%dT%H%M%S-%Z')
        LOG=$RERUN_LOGS/$MODULE-$COMMAND-$TSTAMP-$$.running
        # Execute the command script and direct output to the log file.
        # Get the exit code of the script execution (not the `tee` command).
        $RERUN_SH $RERUN_VERBOSE $COMMAND_SCRIPT "$@" | tee $LOG

        RERUN_EXITSTATUS=${PIPESTATUS[0]}
        # Generate execution metadata for the replay file.

        _rerun_catReplayMetadata $@ > ${LOG%*.running}.metadata || rerun_die "Failed generating replay log."
        REPLAYLOG=$RERUN_LOGS/$MODULE-$COMMAND-$TSTAMP-$$.replay
        cat ${LOG%*.running}.metadata $LOG > $REPLAYLOG || rerun_die "Failed generating replay log."
        rm -f $LOG ${LOG%*.running}.metadata; # cleanup working files
        LOG=$REPLAYLOG
	    
        rm -f $RERUN_LOGS/$MODULE-$COMMAND-latest.replay; #remove old symlink
        ln -s $LOG $RERUN_LOGS/$MODULE-$COMMAND-latest.replay; # recreate it to latest

        if [[ -n "$REPLAY" ]]
        then
            _rerun_extractLog $REPLAY > $RERUN_LOGS/rerun-$$.checklog
            _rerun_extractLog $LOG > $RERUN_LOGS/rerun-$$.log
            
            $DIFF $RERUN_LOGS/rerun-$$.checklog $RERUN_LOGS/rerun-$$.log > $RERUN_LOGS/rerun-$$.diff
            RERUN_EXITSTATUS=$?
            [[ $RERUN_EXITSTATUS -eq 1 ]] && {
                echo -e ${bold}"[diff]"${_bold}
                cat $RERUN_LOGS/rerun-$$.diff
            }
            rm -f $RERUN_LOGS/rerun-$$.{log,checklog,diff}
        fi
    fi
}

# _rerun_metadataLookup_

# Lookup a metadata property value.
rerun_metadataLookup() {
    local field=$1 file=$2
    [[ ! -r $file ]] && { echo "file not found: $file" ; return 1 ; }
    while read line
    do
        key=${line%%=*}
        value=${line##*=}
        [[ "$key" == "$field" ]] && {
            echo $value ; break ;
        }
    done < $file
}


#
#
# ---------- End function library.
#

#
# Execution Mode
# ===============

# If this file is being sourced, return now.

if [[ "$BASH_SOURCE" != "$RERUN" ]]
then
    return
fi


# Private helper functions
# ----------------------

# __rerun_answerOptions_

# given a command set options based on answer file
_rerun_answerOptions() {
    [[ $# -lt 2 ]] && {
        echo "usage: _rerun_answerOptions: module command ?answers?" >&2
        return 2
    }
    argline=
    for metadata in $RERUN_MODULES/$1/commands/$2/*.option
    do        
        option=$(
            . $metadata; # source the option metadata
            [[ -n "$LONG" ]] && flag="$LONG" || flag="$NAME"
            if [[ "$ARGUMENTS" = "true" && -r "$3" ]]
            then 
                var=$(echo $NAME | tr "[a-z]" "[A-Z]")
                arg=$(awk -F= "/^$var/ {print \$2}" $3)
            fi
            [[ -n "$arg" ]] && printf -- "--%s %s" "$flag" "$arg"
        )
        argline="$argline $option"
    done
    echo "$argline"
}

# __rerun_extractLog_

# Extract the log data from the replay log file.
_rerun_extractLog() {
    [[ ! $# -eq 1 ]] && { 
	    rerun_die 'wrong # args: should be: _rerun_extractLog file'
    }
    local file=$1
    [[ -f $file ]] || { 
        rerun_die "file does not exist: $file"
    }
    local SIZE=$(awk '/^__COMMAND_OUT_BELOW__/ {print NR + 1; exit 0; }' $file) || rerun_die "failed sizing log"
    tail -n+$SIZE $file || rerun_die "failed extracting log"
}

# __rerun_catReplayMetadata_

# Generate execution metadata for a replay log
# This metadata describes the command execution context and is
# sufficient to re-execute the command.
# Output from the execution is delimited by `__COMMAND_OUT_BELOW__`.
_rerun_catReplayMetadata() {
    (
       cat <<EOF
#
# Command replay log
#
RERUN="$0"
MODULE="$MODULE"
COMMAND="$COMMAND"
OPTIONS="$*"
USER="$USER"
DATE="$TSTAMP"
EXIT_STATUS="$RERUN_EXITSTATUS"
__COMMAND_OUT_BELOW__
       
EOF
    )
}

# __rerun_banner_

# Prints logo and version info with a rainbow of colors!
_rerun_banner() {
    echo $(tput setaf 1) " _ __ ___ _ __ _   _ _ __"
    echo $(tput setaf 2) "| '__/ _ \ '__| | | | '_ \ "
    echo $(tput setaf 3) "| | |  __/ |  | |_| | | | |"
    echo $(tput setaf 4) "|_|  \___|_|   \__,_|_| |_|"
    echo $(tput setaf 5) "Version: $RERUN_VERSION. License: Apache 2.0."$(tput sgr0)
}

# __rerun_usage_

# Print usage summary
_rerun_usage() {
    [[ ! $# = 1 ]] && { 
        rerun_die "wrong # args: should be: _rerun_usage prog" 
    }
    prog=$1    
    usage="Usage: $prog [-h][-v][-V] [-M <dir>] [-L <dir>] [--replay <file>] [--answer <file>] [module:[command [options]]]"
    echo $usage
}

# __rerun_examples_

# Print usage examples
_rerun_examples() {
    [[ ! $# = 1 ]] && { 
        rerun_die "wrong # args: should be: _rerun_examples prog" 
    }
    if [[ "$RERUN_COLOR" = "true" ]]
    then echo $(tput sgr 0 1)"Examples:"$(tput sgr0)
    else echo "Examples:"
    fi
echo "| \$ $prog
| => List all modules.
| \$ $prog freddy
| => List all freddy commands.
| \$ $prog freddy:dance --jumps 3
| => Execute the freddy dance command."
}


# __rerun_man_

# Each module can have a Unix man page. 
# Use stubbs:docs to generate the man page if one doesn't
# already exist. Display the man page with `nroff`.

_rerun_man() {
    [[ ! $# = 1 ]] && { 
        rerun_die "wrong # args: should be: _rerun_man module" 
    }
    local module=$1
    if [[ ! -f "$RERUN_MODULES/$module/$module.1" 
                && -f "$RERUN_MODULES/stubbs/commands/docs/default.sh" ]]
    then $RERUN stubbs:docs --module $module 
    fi
    if [[ -f "$RERUN_MODULES/$module/$module.1" ]]
    then nroff -man "$RERUN_MODULES/$module/$module.1" | ${PAGER:-more}
    else echo >&2 "Manual could not be generated." 
    fi
}


# List modules and commands 
# --------------------------

# **rerun** provides two listing modes: module and commands.
# If a user specifies `rerun` without arguments, a listing
# of module names and their descriptions is displayed.
# If a user specifies a module name: `rerun <module>`,
# then a listing of commands and their options are displayed.

PAD="  "

# __rerun_modulesListing_

# List the modules.
# When rerun is installed in the system location
# and rerun modules is different to the system location,
# then list the system installed ones separately.
#TODO: add a unit test for these assumptions.

_rerun_modulesListing() {
    [[ ! $# = 1 ]] && { 
        rerun_die "wrong # args: should be: _rerun_modulesListing RERUN_MODULES" 
    }
    RERUN_MODULES=$1
    echo -e $gray"Available modules in \"$RERUN_MODULES\":"$_gray
    shopt -s nullglob # enable
    for module in $RERUN_MODULES/*
    do
       	module_dirname=$(rerun_existsModule $(basename "$module")) && {
            module_name=$(basename "$module")
            module_desc=$(rerun_metadataLookup DESCRIPTION "$module/metadata")
            echo "${PAD}${module_name}: ${module_desc}" 
        }
    done


    if [[ $RERUN_LOCATION = "/usr/bin" && $RERUN_MODULES != "/usr/lib/rerun/modules" ]]
    then
        echo
        echo -e $gray"Available modules in \"/usr/lib/rerun/modules\":"$_gray
        for module in /usr/lib/rerun/modules/*; do
            module_dirname=$(rerun_existsModule $(basename "$module")) && {
                module_name=$(basename "$module")
                module_desc=$(rerun_metadataLookup DESCRIPTION $module/metadata)
                echo "${PAD}${module_name}: ${module_desc}" 
            }
        done
    fi
}


# __rerun_commandListing_

# List commands

_rerun_commandListing() {
    [[ ! $# = 2 ]] && { 
        rerun_die "wrong # args: should be: _rerun_commandListing modulesdir module" 
    }
    RERUN_MODULES=$1
    MODULE=$2
    bold() { echo -e "\033[1m$*\033[0m" ; tput sgr0 ; }

    module_dir=$(rerun_existsModule "$MODULE") || rerun_syntax_error "module not found: \"$MODULE\""
    echo -e $gray"Available commands in module, \"$module_dir\":"$_gray
    shopt -s nullglob # enable
    for cmd in $module_dir/commands/*/default.sh
	do
        cmd_name=$(basename $(dirname "$cmd"))
        metadata=$module_dir/commands/${cmd_name}/metadata
        [[ -f "$metadata" ]] && cmd_desc=$(rerun_metadataLookup DESCRIPTION $metadata)
        bold "${cmd_name}: ${cmd_desc}"
        if [[ -d "$module_dir/commands/${cmd_name}" ]]
        then            
            shopt -s nullglob # enable
            optfiles=( $module_dir/commands/${cmd_name}/*.option )
            for opt_metadata in ${optfiles[*]}; do
                cmd_param=$(basename "$(echo ${opt_metadata%%.option})")
                (    argstring= summary=                  
                    . $opt_metadata ; # Read the option's metadata.                    
                    [[ -n "${SHORT}" ]] && {                    
                       argstring=$(printf ' --%s|-%s'  "$NAME" "$SHORT")
                    } || {
                       argstring=$(printf " --%s" "$NAME" )
                    }	  
                    [[ "$ARGUMENTS" == "true" ]] && {
                        argstring=$(printf "%s <${ul}%s${_ul}>" "$argstring" "$DEFAULT")
                    }
                    [[ "$REQUIRED" != "true" ]] && {
                        summary=$(printf "[%s]: \"%s\"" "${argstring}" "$DESCRIPTION") 
                    } || {
                        summary=$(printf "%s: \"%s\"" "${argstring}" "$DESCRIPTION")
                    }
                    echo -e "$PAD $summary"
                )
            done
        fi
    done
}


# Parse rerun command line options
# --------------------------------

# There are two sets of options, `rerun` specific arguments 
# and command options.

while [ "$#" -gt 0 ]; do
    OPT="$1"
    case "$OPT" in
	-h*|--h*)
        _rerun_banner
        _rerun_usage $(basename "$0")
        _rerun_examples $(basename "$0")
        exit 0
	    ;;
  	-v)
	    RERUN_VERBOSE="-vx"
	    ;;
  	-V)
	    RERUN_VERBOSE="-vx"
	    set -vx
	    ;;
	--man*)
	    rerun_syntax_check "$#" "$1"
	    _rerun_man $2
	    exit 0
	    ;;	
	-M)
	    rerun_syntax_check "$#" "$1"
	    RERUN_MODULES="$2"
	    shift
	    ;;
	-L)        
	    rerun_syntax_check "$#" "$1"
	    RERUN_LOGS="$2" ; # Record log dir.
	    shift
	    ;;	
	--replay)
	    rerun_syntax_check "$#" "$1"
	    REPLAY="$2"
	    shift
	    ;;	
	--answers)
	    rerun_syntax_check "$#" "$1"
	    ANSWERS="$2"
        [[ ! -f $ANSWERS ]] && rerun_syntax_error "answers file not found: $ANSWERS"
	    shift
	    ;;		  
	*)
	    break;# Ignore remaining arguments as they are for the module.
    esac
    shift
done


# Set the absolute path to this invocation of the rerun script. Drives the Linux FSH usage convention where
# modules located in /usr/lib/rerun/modules are appended to the modules in RERUN_MODULES.
RERUN_LOCATION="$(cd "$(dirname "${BASH_SOURCE[0]}" )" && pwd)"

# Default the RERUN_MODULES environment variable.
# If it is not set, then default it to either the system
# install location or relative to the rerun executable.
# TODO: add a unit test for this.

if [[ -z "$RERUN_MODULES" ]]
then
    if [[ "$RERUN_LOCATION" = "/usr/bin" ]]
    then
      RERUN_MODULES="/usr/lib/rerun/modules";  # Linux FSH convention:
    else      
      RERUN_MODULES=${RERUN_LOCATION}/modules; # Set module directory relative to the `rerun` script:
    fi
fi

# Replay requires that a log directory is also set.
#
[[ -n "$REPLAY" && -z "$RERUN_LOGS" ]] && {
    rerun_syntax_error "usage error: --replay <file> also requires -L <dir>" 
}

# Ensure the modules directory path is defined and is a directory.
#
[[ -n "$RERUN_MODULES" && -d "$RERUN_MODULES" ]] || {
    rerun_die "RERUN_MODULES directory not found or does not exist: $RERUN_MODULES"
}

# Clear MODULE and COMMAND in case they were incidentally declared in the environment.

MODULE="" COMMAND=""

# Parse rerun command and their options.
# Use regex to split up command strings.
if [[ "$@" =~ ([^:]+)([:]?[ ]?)([-A-Za-z0-9_]*)([ ]*)(.*) ]]
then
    MODULE=${BASH_REMATCH[1]};    # module
    [ "${BASH_REMATCH[2]}" == ': ' ] && shift ;# eat the extra space char
    COMMAND=${BASH_REMATCH[3]/ /}; # command
    #- BASH_REMATCH[4] contains the whitespace separating command and options.
    #- BASH_REMATCH[5] contains command options.
else
    MODULE=${1/:/}                # module (minus colon)
fi
# Shift over so the remaining arguments are left to the command options.
shift; 

# Read answer file and set positional parameters from them.
if [[ -n "$ANSWERS" && -f "$ANSWERS" ]]
then
    set -- $(_rerun_answerOptions $MODULE $COMMAND $ANSWERS)
fi

# List execution
# ============

# If no module or command are specified, display a listing of modules, showing each 
# module's name and description. Modules are read from the directory referenced 
# using the `$RERUN_MODULES` environment variable.

if [[ -z "$MODULE" && -z "$COMMAND" ]]
then

    _rerun_modulesListing "$RERUN_MODULES"
    exit 0

# If a module name is specified, show the command set.
# For each command, show that command's option list in summary form
# displaying requirement, name, flags, defaults and description.

elif [[ -n "$MODULE" && -z "$COMMAND" ]]
then

    _rerun_commandListing "$RERUN_MODULES" "$MODULE"
    exit 0

fi

# Command execution
# =================

# The module and command must be specified for execution mode.

[[ -z "$MODULE"  ]]  && rerun_syntax_error "module not specified"
[[ -z "$COMMAND" ]]  && rerun_syntax_error "command not specified"

# Execute the specified command.
rerun_executeCommand "$MODULE" "$COMMAND" "$@"

# Exit with the command exit code.
exit ${RERUN_EXITSTATUS}

# Done!
